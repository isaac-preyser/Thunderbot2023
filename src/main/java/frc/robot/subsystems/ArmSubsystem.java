// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
*
*/
public class ArmSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private PWMSparkMax armConveyorController;
    private PWMSparkMax armActuatorController;
    private PWMSparkMax armHandController;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public ArmSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armConveyorController = new PWMSparkMax(Constants.ArmConstants.kArmConveyorMotorPort);
        addChild("Arm Conveyor Controller",armConveyorController);
        armConveyorController.setInverted(false);
        
        armActuatorController = new PWMSparkMax(Constants.ArmConstants.kArmActuatorPort);
        addChild("Arm Actuator Controller",armActuatorController);
        armActuatorController.setInverted(false);
        
        armHandController = new PWMSparkMax(Constants.ArmConstants.kHandActuatorPort);
        addChild("Arm Hand Controller",armHandController);
        armHandController.setInverted(false);
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        
    }
    
    
    public void setConveyor (double position) {
        armConveyorController.set(position);
    }
    public void setHand (double position) {
        armHandController.set(position);
    }
    public void setArm (double position) {
        armActuatorController.set(position);
    }
    public void transformCartesian (double x, double y){
        //this method should take in a set of x and y coordinates, and use inverse kinematics to set the two-joint robotic arm to the correct position.
        //note the conveyor is used for the position of the second joint, and the actuator for the first. 
        //the method should transform the arm's position proportionally on a cartesian plane. If the arm is at a given position, a translation in the X should move it directly out. 
        //a translation in the Y should move it directly up.
        //the method should also take into account the length of the arm, and the position of the second joint.
      
        //write this tomorrow. I am tired.


    }
    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
        
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
}

